/ hide slides on %conceal, %notitle and named "!"
- titleless = (title = self.title) == '!'
- hide_title = (titleless || (option? :notitle) || (option? :conceal))

/ slide options processing
- data_background = (attr? 'background') ? (image_uri(attr 'background')) : nil
- vertical_slides = find_by(context: :section) {|section| section.level == 2 }

/ render parent section of vertical slides set
- if @level == 1 && !vertical_slides.empty?
  section
    / TODO: test if possible to get rid of duplication
    section(id=(titleless ? nil : @id)
      data-transition=(attr 'transition')
      data-transition-speed=(attr 'transition-speed')
      data-background=data_background
      data-background-size=(attr 'background-size')
      data-background-repeat=(attr 'background-repeat')
      data-background-transition=(attr 'background-transition'))
      - unless hide_title
        h2=title
      - (blocks - vertical_slides).each do |block|
        =block.convert
    - vertical_slides.each do |subsection|
      =subsection.convert

/ render standalone slides (or vertical slide subsection)
- else
  - if @level >= 3
    / dynamic tags which maps <hX> with level
    *{tag: %(h#{@level})} =title
    =content.chomp
  - else
    section(id=(titleless ? nil : @id)
      data-transition=(attr 'transition')
      data-transition-speed=(attr 'transition-speed')
      data-background=data_background
      data-background-size=(attr 'background-size')
      data-background-repeat=(attr 'background-repeat')
      data-background-transition=(attr 'background-transition'))
      - unless hide_title
        h2=title
      =content.chomp
